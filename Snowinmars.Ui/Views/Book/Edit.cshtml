@model Snowinmars.Ui.Models.BookModel

@{
	ViewBag.Title = "Edit";
	Layout = "~/Views/Layouts/DefaultLayout.cshtml";
}

@section Content
{
	<link href="~/Content/snowinmars/bookEdit.css" rel="stylesheet" />
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Book", FormMethod.Post))
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">

		<h4>book</h4>
		<div>@Html.ActionLink("Back to List", "Index", "Book")</div>
		<hr />

		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		@Html.HiddenFor(model => model.Id)

		<div class="modal fade" id="addLiveLibUrlModal" tabindex="-1" role="dialog" aria-labelledby="addLiveLibUrlModalLabel">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="myModalLabel">Modal title</h4>
					</div>
					<div class="modal-body">
						@Html.LabelFor(model => model.LiveLibUrl, htmlAttributes: new { @class = "control-label col-md-2" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.LiveLibUrl, new { htmlAttributes = new { @class = "form-control" }})
							@Html.ValidationMessageFor(model => model.LiveLibUrl, "", new { @class = "text-danger" })
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default btn-closeUrlModal" data-dismiss="modal">Close</button>
						<button type="button" class="btn btn-primary btn-okUrlModal" data-dismiss="modal">Ok</button>
					</div>
				</div>
			</div>
		</div>
		
		<div class="modal fade" id="addLibRusEcUrlModal" tabindex="-1" role="dialog" aria-labelledby="addLibRusEcUrlModalLabel">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="myModalLabel">Modal title</h4>
					</div>
					<div class="modal-body">
						@Html.LabelFor(model => model.LibRusEcUrl, htmlAttributes: new { @class = "control-label col-md-2" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.LibRusEcUrl, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.LibRusEcUrl, "", new { @class = "text-danger" })
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default btn-closeUrlModal" data-dismiss="modal">Close</button>
						<button type="button" class="btn btn-primary btn-okUrlModal" data-dismiss="modal">Ok</button>
					</div>
				</div>
			</div>
		</div>
		
		<div class="modal fade" id="addFlibustaUrlModal" tabindex="-1" role="dialog" aria-labelledby="addFlibustaUrlModalLabel">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="myModalLabel">Modal title</h4>
					</div>
					<div class="modal-body">
						@Html.LabelFor(model => model.FlibustaUrl, htmlAttributes: new { @class = "control-label col-md-2" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.FlibustaUrl, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.FlibustaUrl, "", new { @class = "text-danger" })
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default btn-closeUrlModal" data-dismiss="modal">Close</button>
						<button type="button" class="btn btn-primary btn-okUrlModal" data-dismiss="modal">Ok</button>
					</div>
				</div>
			</div>
		</div>

		<div class="col-xs-12 urls">
			
			<div class="btn-group" role="group" aria-label="...">
				@if (string.IsNullOrWhiteSpace(Model.LiveLibUrl))
				{
					<button type="button" class="btn btn-default liveLibUrlButton disabled">LiveLib</button>
					<button type="button" class="btn btn-default addLiveLibUrlButton glyphicon glyphicon-plus" data-toggle="modal" data-target="#addLiveLibUrlModal"></button>
				}
				else
				{
					<a href="@Model.LiveLibUrl" target="_blank" type="button" class="btn btn-default liveLibUrlButton">LiveLib</a>
					<button type="button" class="btn btn-default editLiveLibUrlButton glyphicon glyphicon-pencil" data-toggle="modal" data-target="#addLiveLibUrlModal"></button>
				}
			</div>

			<div class="btn-group" role="group" aria-label="...">
				@if (string.IsNullOrWhiteSpace(Model.LibRusEcUrl))
				{
					<button type="button" class="btn btn-default liveLibUrlButton disabled">Lib.Rus.Ec</button>
					<button type="button" class="btn btn-default addLibRusEcUrlButton glyphicon glyphicon-plus" data-toggle="modal" data-target="#addLibRusEcUrlModal"></button>
				}
				else
				{
					<a href="@Model.LibRusEcUrl" target="_blank" type="button" class="btn btn-default liveLibUrlButton">Lib.Rus.Ec</a>
					<button type="button" class="btn btn-default editLibRusEcUrlButton glyphicon glyphicon-pencil" data-toggle="modal" data-target="#addLibRusEcUrlModal"></button>
				}
			</div>
			
			<div class="btn-group" role="group" aria-label="...">
				@if (string.IsNullOrWhiteSpace(Model.FlibustaUrl))
				{
					<button type="button" class="btn btn-default liveLibUrlButton disabled">Flibusta</button>
					<button type="button" class="btn btn-default addFlibustaUrlButton glyphicon glyphicon-plus" data-toggle="modal" data-target="#addFlibustaUrlModal"></button>
				}
				else
				{
					<a href="@Model.FlibustaUrl" target="_blank" type="button" class="btn btn-default liveLibUrlButton">Flibusta</a>
					<button type="button" class="btn btn-default editFlibustaUrlButton glyphicon glyphicon-pencil" data-toggle="modal" data-target="#addFlibustaUrlModal"></button>
				}
			</div>
			
			<div class="urlSaveMessage">
				<span>To save urls' changes, push the Save button below</span>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.PageCount, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-6">
				@Html.EditorFor(model => model.PageCount, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.PageCount, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-6">
				@Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-6">
				@Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.AuthorModelIds, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-6">
				@Html.DropDownList("authorModelIds", new SelectListItem[0], new Dictionary<string, object> { { "class", "authorModelIds" }, { "multiple", "multiple" }, })
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Save" class="btn btn-default" />
			</div>
		</div>
	</div>
}

@section Scripts
{
	<script src="~/Scripts/snowinmars/bookEdit.js"></script>
}